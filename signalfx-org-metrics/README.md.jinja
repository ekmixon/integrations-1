{% import "macros.jinja" as macros %}

{% if target == "docs" -%}
# Splunk Infrastructure Monitoring Organization Metrics


- [Description](#description)
- [Usage](#usage)
- [Metrics](#metrics)
{%- endif %}

## DESCRIPTION

Splunk Infrastructure Monitoring provides the following types of metrics that measure your usage:

-  Ingest metrics that measure the data you're sending to Infrastructure Monitoring, such as the number of datapoints you've sent, or the number of metric time series (**MTS**) created from the datapoints and dimensions you sent

-  App usage or engagement metrics that measure your use of application features, such as the number of dashboards or charts in your organization

-  Cloud service integration metrics that measure how Infrastructure Monitoring pulls data from cloud services such as Amazon Web Services (**AWS**) or Google Cloud Platform (**GCP**), such as the number of calls to each GCP Stackdriver client method, or the number of the calls to the AWS CloudWatch API that AWS has throttled

-  Metrics that measure your use of resources for which you can specify limits, such as the number of custom MTS you've created. These metrics
   help you track usage and avoid going over your organization limits.

You're not charged for these metrics, and they do not count against any limits.


## USAGE

Admins can view some of these metrics in built-in charts on the Organization Overview page. Like other metrics, you can display them in custom charts you create in order to monitor your system health.

### Metric pairs that provide total and ByToken values

Some metrics send both a total value and a ByToken value, such as `sf.org.numAddDatapointCalls` and `sf.org.numAddDatapointCallsByToken`.

The sum of all the ByToken values for a metric may be less than the value of its non-token-based counterpart metric.
The sums differ because Infrastructure Monitoring doesn't use a token to retrieve cloud service data you've requested with an integration.
This applies to AWS CloudWatch, GCP StackDriver, AppDynamics, and New Relic.

For example, if you sum the values for `sf.org.numAddDatapointCallsByToken`, the result may be less than the value of
`sf.org.numAddDatapointCalls`, because `sf.org.numAddDatapointCalls` includes data from cloud service integrations,
while `sf.org.numAddDatapointCallsByToken` does not.

### Metrics with values for each metric type

Some metrics have a value for each metric type (counter, cumulative counter or gauge), so you have three MTS per metric. Each MTS has a dimension named `category` with a value of `COUNTER`, `CUMULATIVE_COUNTER`, or `GAUGE`. Because you can have multiple MTS for these metrics, you need to use the `sum()` SignalFlow function to see the total value.

For example, you might receive three MTS for `sf.org.numMetricTimeSeriesCreated`, one for the number of MTS that are counters, another for the number of MTS that are cumulative counters, and a third for the number of MTS that are gauges. To find the total number of MTS created, you need to sum those values.
Use this SignalFlow expression:

Also, you can filter by a single value of `category`, such as `GAUGE`, to see only the metrics of that type.

### Metric that counts stopped detectors

The metric `sf.org.numDetectorsAborted` monitors the number of detectors that Infrastructure Monitoring stopped because the detector reached a resource limit; this usually occurs when the number of MTS exceeds 250K. This condition also generates the event `sf.org.abortedDetectors`, which records details including the detector ID, the reason it stopped, and the value or limit of MTS or datapoints, whichever caused the detector to stop.

To learn more, see [View Additional Data With Events](https://docs.signalfx.com/en/latest/detect-alert/events-intro.html).

### Metrics that track contractual limits

Two metrics track limits set for your organization as part of your contract:

* `sf.org.limit.activeTimeSeries`: As part of your contract, Infrastructure Monitoring lets you have this number of active MTS in your organization. If you
  exceed your limit, Infrastructure Monitoring stops creating new MTS while continuing to add datapoints to existing MTS.
* `sf.org.limit.metricTimeSeriesCreatedPerMinute`: As part of your contract, Infrastructure Monitoring lets you create this number of MTS
  per minute. If you exceed this rate, Infrastructure Monitoring stops creating MTS.

Infrastructure Monitoring only sends datapoints if the value is not zero.

### Metrics that track system limits

Three metrics track limits that Infrastructure Monitoring enforces for all organizations:

* `sf.org.limit.hosts`: Maximum number of hosts that can send data to your organization. If you exceed this limit, Infrastructure Monitoring
  drops datapoints from newly-added hosts but keeps datapoints for existing hosts.
* `sf.org.limit.containers`: Maximum number of Docker containers that can send data to your organization. If you exceed this limit, Infrastructure Monitoring
  drops datapoints from newly-added containers but keeps datapoints for existing containers.
* `sf.org.limit.customMetricTimeSeries`: Maximum number of custom MTS you can create in your organization. Custom MTS use a metric defined by
  you, rather than a metric defined by an integration. If you exceed this limit, Infrastructure Monitoring stops creating new custom MTS.

## Metrics

{{ macros.metric_list(metrics) }}
